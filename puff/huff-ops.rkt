#lang racket/base

(define huff-instructions
  '("add"
    "addmod"
    "address"
    "and"
    "balance"
    "basefee"
    "blobbasefee"
    "blobhash"
    "blockhash"
    "byte"
    "call"
    "callcode"
    "calldatacopy"
    "calldataload"
    "calldatasize"
    "caller"
    "callvalue"
    "chainid"
    "codecopy"
    "codesize"
    "coinbase"
    "create"
    "create2"
    "delegatecall"
    "div"
    "dup1"
    "dup10"
    "dup11"
    "dup12"
    "dup13"
    "dup14"
    "dup15"
    "dup16"
    "dup2"
    "dup3"
    "dup4"
    "dup5"
    "dup6"
    "dup7"
    "dup8"
    "dup9"
    "eq"
    "exp"
    "extcodecopy"
    "extcodehash"
    "extcodesize"
    "gas"
    "gaslimit"
    "gasprice"
    "gt"
    "invalid"
    "iszero"
    "jump"
    "jumpdest"
    "jumpi"
    "keccak256"
    "log0"
    "log1"
    "log2"
    "log3"
    "log4"
    "lt"
    "mcopy"
    "mload"
    "mod"
    "msize"
    "mstore"
    "mstore8"
    "mul"
    "mulmod"
    "not"
    "number"
    "or"
    "origin"
    "pc"
    "pop"
    "prevrandao"
    "push0"
    "push1"
    "push10"
    "push11"
    "push12"
    "push13"
    "push14"
    "push15"
    "push16"
    "push17"
    "push18"
    "push19"
    "push2"
    "push20"
    "push21"
    "push22"
    "push23"
    "push24"
    "push25"
    "push26"
    "push27"
    "push28"
    "push29"
    "push3"
    "push30"
    "push31"
    "push32"
    "push4"
    "push5"
    "push6"
    "push7"
    "push8"
    "push9"
    "return"
    "returndatacopy"
    "returndatasize"
    "revert"
    "sar"
    "sdiv"
    "selfbalance"
    "selfdestruct"
    "sgt"
    "shl"
    "shr"
    "signextend"
    "sload"
    "slt"
    "smod"
    "sstore"
    "staticcall"
    "stop"
    "sub"
    "swap1"
    "swap10"
    "swap11"
    "swap12"
    "swap13"
    "swap14"
    "swap15"
    "swap16"
    "swap2"
    "swap3"
    "swap4"
    "swap5"
    "swap6"
    "swap7"
    "swap8"
    "swap9"
    "timestamp"
    "tload"
    "tstore"
    "xor"))

(define (instruction? op)
  (member op huff-instructions))

(define (instruction->opcode op)
  (if (instruction? op)
      (string-upcase op)
      (error 'instruction->opcode "not a huff opcode" op)))

(provide huff-instructions instruction? instruction->opcode)
